//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Workout.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class WorkoutLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, NAME=2, SETS=3, REPS=4, WS=5;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "NAME", "SETS", "REPS", "WS"
	};


	public WorkoutLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public WorkoutLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'x'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "NAME", "SETS", "REPS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Workout.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static WorkoutLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,5,69,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,3,1,52,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,61,8,3,1,4,4,4,64,8,4,11,
		4,12,4,65,1,4,1,4,0,0,5,1,1,3,2,5,3,7,4,9,5,1,0,4,1,0,49,52,1,0,49,57,
		1,0,48,57,3,0,9,10,13,13,32,32,75,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,1,11,1,0,0,0,3,51,1,0,0,0,5,53,1,0,0,0,7,60,1,
		0,0,0,9,63,1,0,0,0,11,12,5,120,0,0,12,2,1,0,0,0,13,14,5,83,0,0,14,15,5,
		113,0,0,15,16,5,117,0,0,16,17,5,97,0,0,17,52,5,116,0,0,18,19,5,76,0,0,
		19,20,5,117,0,0,20,21,5,110,0,0,21,22,5,103,0,0,22,52,5,101,0,0,23,24,
		5,76,0,0,24,25,5,101,0,0,25,26,5,103,0,0,26,27,5,67,0,0,27,28,5,117,0,
		0,28,29,5,114,0,0,29,52,5,108,0,0,30,31,5,76,0,0,31,32,5,101,0,0,32,33,
		5,103,0,0,33,34,5,69,0,0,34,35,5,120,0,0,35,36,5,116,0,0,36,37,5,101,0,
		0,37,38,5,110,0,0,38,39,5,115,0,0,39,40,5,105,0,0,40,41,5,111,0,0,41,52,
		5,110,0,0,42,43,5,72,0,0,43,44,5,105,0,0,44,45,5,112,0,0,45,46,5,84,0,
		0,46,47,5,104,0,0,47,48,5,114,0,0,48,49,5,117,0,0,49,50,5,115,0,0,50,52,
		5,116,0,0,51,13,1,0,0,0,51,18,1,0,0,0,51,23,1,0,0,0,51,30,1,0,0,0,51,42,
		1,0,0,0,52,4,1,0,0,0,53,54,7,0,0,0,54,6,1,0,0,0,55,61,7,1,0,0,56,57,5,
		49,0,0,57,61,7,2,0,0,58,59,5,50,0,0,59,61,5,48,0,0,60,55,1,0,0,0,60,56,
		1,0,0,0,60,58,1,0,0,0,61,8,1,0,0,0,62,64,7,3,0,0,63,62,1,0,0,0,64,65,1,
		0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,67,1,0,0,0,67,68,6,4,0,0,68,10,1,
		0,0,0,4,0,51,60,65,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
