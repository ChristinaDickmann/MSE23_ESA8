//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Workout.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class WorkoutParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, NAME=2, SETS=3, REPS=4, WS=5;
	public const int
		RULE_plan = 0, RULE_exercise = 1;
	public static readonly string[] ruleNames = {
		"plan", "exercise"
	};

	private static readonly string[] _LiteralNames = {
		null, "'x'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "NAME", "SETS", "REPS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Workout.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static WorkoutParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WorkoutParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WorkoutParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PlanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExerciseContext[] exercise() {
			return GetRuleContexts<ExerciseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExerciseContext exercise(int i) {
			return GetRuleContext<ExerciseContext>(i);
		}
		public PlanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plan; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWorkoutListener typedListener = listener as IWorkoutListener;
			if (typedListener != null) typedListener.EnterPlan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWorkoutListener typedListener = listener as IWorkoutListener;
			if (typedListener != null) typedListener.ExitPlan(this);
		}
	}

	[RuleVersion(0)]
	public PlanContext plan() {
		PlanContext _localctx = new PlanContext(Context, State);
		EnterRule(_localctx, 0, RULE_plan);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4;
				exercise();
				}
				}
				State = 7;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExerciseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(WorkoutParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(WorkoutParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPS() { return GetToken(WorkoutParser.REPS, 0); }
		public ExerciseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exercise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWorkoutListener typedListener = listener as IWorkoutListener;
			if (typedListener != null) typedListener.EnterExercise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWorkoutListener typedListener = listener as IWorkoutListener;
			if (typedListener != null) typedListener.ExitExercise(this);
		}
	}

	[RuleVersion(0)]
	public ExerciseContext exercise() {
		ExerciseContext _localctx = new ExerciseContext(Context, State);
		EnterRule(_localctx, 2, RULE_exercise);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			Match(NAME);
			State = 10;
			Match(SETS);
			State = 11;
			Match(T__0);
			State = 12;
			Match(REPS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,5,15,2,0,7,0,2,1,7,1,1,0,4,0,6,8,0,11,0,12,0,7,1,1,1,1,1,1,1,1,1,1,
		1,1,0,0,2,0,2,0,0,13,0,5,1,0,0,0,2,9,1,0,0,0,4,6,3,2,1,0,5,4,1,0,0,0,6,
		7,1,0,0,0,7,5,1,0,0,0,7,8,1,0,0,0,8,1,1,0,0,0,9,10,5,2,0,0,10,11,5,3,0,
		0,11,12,5,1,0,0,12,13,5,4,0,0,13,3,1,0,0,0,1,7
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
